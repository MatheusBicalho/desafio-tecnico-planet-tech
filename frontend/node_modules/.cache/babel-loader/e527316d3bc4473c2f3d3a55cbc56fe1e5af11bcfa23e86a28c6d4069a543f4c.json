{"ast":null,"code":"const API_BASE = ''; // Proxy para backend em :3001\n\nexport const getMessages = async () => {\n  const response = await fetch(`${API_BASE}/messages`);\n  if (!response.ok) throw new Error('Erro ao buscar mensagens');\n  return response.json();\n};\nexport const sendMessage = async message => {\n  const response = await fetch(`${API_BASE}/messages`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(message)\n  });\n  if (!response.ok) throw new Error('Erro ao enviar mensagem');\n  return response.json();\n};\nexport const uploadFile = async file => {\n  const formData = new FormData();\n  formData.append('file', file);\n  const response = await fetch(`${API_BASE}/upload`, {\n    method: 'POST',\n    body: formData\n  });\n  if (!response.ok) throw new Error('Erro ao fazer upload');\n  return response.json();\n};","map":{"version":3,"names":["API_BASE","getMessages","response","fetch","ok","Error","json","sendMessage","message","method","headers","body","JSON","stringify","uploadFile","file","formData","FormData","append"],"sources":["C:/Users/mathe/planet-tech-chat/frontend/src/services/api.js"],"sourcesContent":["const API_BASE = ''; // Proxy para backend em :3001\r\n\r\nexport const getMessages = async () => {\r\n  const response = await fetch(`${API_BASE}/messages`);\r\n  if (!response.ok) throw new Error('Erro ao buscar mensagens');\r\n  return response.json();\r\n};\r\n\r\nexport const sendMessage = async (message) => {\r\n  const response = await fetch(`${API_BASE}/messages`, {\r\n    method: 'POST',\r\n    headers: { 'Content-Type': 'application/json' },\r\n    body: JSON.stringify(message),\r\n  });\r\n  if (!response.ok) throw new Error('Erro ao enviar mensagem');\r\n  return response.json();\r\n};\r\n\r\nexport const uploadFile = async (file) => {\r\n  const formData = new FormData();\r\n  formData.append('file', file);\r\n  const response = await fetch(`${API_BASE}/upload`, {\r\n    method: 'POST',\r\n    body: formData,\r\n  });\r\n  if (!response.ok) throw new Error('Erro ao fazer upload');\r\n  return response.json();\r\n};\r\n"],"mappings":"AAAA,MAAMA,QAAQ,GAAG,EAAE,CAAC,CAAC;;AAErB,OAAO,MAAMC,WAAW,GAAG,MAAAA,CAAA,KAAY;EACrC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGH,QAAQ,WAAW,CAAC;EACpD,IAAI,CAACE,QAAQ,CAACE,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,0BAA0B,CAAC;EAC7D,OAAOH,QAAQ,CAACI,IAAI,CAAC,CAAC;AACxB,CAAC;AAED,OAAO,MAAMC,WAAW,GAAG,MAAOC,OAAO,IAAK;EAC5C,MAAMN,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGH,QAAQ,WAAW,EAAE;IACnDS,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC;IAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACL,OAAO;EAC9B,CAAC,CAAC;EACF,IAAI,CAACN,QAAQ,CAACE,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,yBAAyB,CAAC;EAC5D,OAAOH,QAAQ,CAACI,IAAI,CAAC,CAAC;AACxB,CAAC;AAED,OAAO,MAAMQ,UAAU,GAAG,MAAOC,IAAI,IAAK;EACxC,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;EAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEH,IAAI,CAAC;EAC7B,MAAMb,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGH,QAAQ,SAAS,EAAE;IACjDS,MAAM,EAAE,MAAM;IACdE,IAAI,EAAEK;EACR,CAAC,CAAC;EACF,IAAI,CAACd,QAAQ,CAACE,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,sBAAsB,CAAC;EACzD,OAAOH,QAAQ,CAACI,IAAI,CAAC,CAAC;AACxB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}