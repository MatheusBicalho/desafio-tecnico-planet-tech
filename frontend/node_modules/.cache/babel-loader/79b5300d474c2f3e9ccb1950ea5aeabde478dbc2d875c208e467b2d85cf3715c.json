{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mathe\\\\planet-tech-chat\\\\frontend\\\\src\\\\context\\\\AppContext.js\",\n  _s = $RefreshSig$();\n// src/context/AppContext.js - CÓDIGO CORRIGIDO (Adicionar resetPreview)\n\nimport React, { createContext, useState, useEffect } from 'react';\nimport * as api from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AppContext = /*#__PURE__*/createContext();\nexport const AppProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [messages, setMessages] = useState([]);\n  const [preview, setPreview] = useState(null);\n\n  // Poll mensagens a cada 5s\n  useEffect(() => {\n    if (user) {\n      // ... (código fetchMessages e setInterval)\n      const fetchMessages = async () => {\n        try {\n          const data = await api.getMessages();\n          setMessages(data);\n        } catch (error) {\n          console.error(\"Erro ao carregar mensagens:\", error);\n          // Opcional: manter mensagens antigas se houver erro temporário.\n        }\n      };\n      fetchMessages();\n      const interval = setInterval(fetchMessages, 5000);\n      return () => clearInterval(interval);\n    }\n  }, [user]);\n  const login = username => setUser(username);\n  const logout = () => {\n    setUser(null);\n    setMessages([]); // Opcional: Limpa as mensagens ao sair\n  };\n\n  // --- CORREÇÃO: Função resetPreview adicionada ---\n  const resetPreview = () => setPreview(null);\n  // ------------------------------------------------\n\n  const value = {\n    user,\n    messages,\n    preview,\n    setPreview,\n    login,\n    logout,\n    resetPreview // Incluído no contexto\n  };\n  return /*#__PURE__*/_jsxDEV(AppContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 10\n  }, this);\n};\n_s(AppProvider, \"Q9TdBvdVwrOTTEjkB4Bag3iwNkk=\");\n_c = AppProvider;\nvar _c;\n$RefreshReg$(_c, \"AppProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","api","jsxDEV","_jsxDEV","AppContext","AppProvider","children","_s","user","setUser","messages","setMessages","preview","setPreview","fetchMessages","data","getMessages","error","console","interval","setInterval","clearInterval","login","username","logout","resetPreview","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/mathe/planet-tech-chat/frontend/src/context/AppContext.js"],"sourcesContent":["// src/context/AppContext.js - CÓDIGO CORRIGIDO (Adicionar resetPreview)\r\n\r\nimport React, { createContext, useState, useEffect } from 'react';\r\nimport * as api from '../services/api';\r\n\r\nexport const AppContext = createContext();\r\n\r\nexport const AppProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [messages, setMessages] = useState([]);\r\n  const [preview, setPreview] = useState(null);\r\n\r\n  // Poll mensagens a cada 5s\r\n  useEffect(() => {\r\n    if (user) {\r\n      // ... (código fetchMessages e setInterval)\r\n      const fetchMessages = async () => {\r\n        try {\r\n          const data = await api.getMessages();\r\n          setMessages(data);\r\n        } catch (error) {\r\n          console.error(\"Erro ao carregar mensagens:\", error);\r\n          // Opcional: manter mensagens antigas se houver erro temporário.\r\n        }\r\n      };\r\n      fetchMessages();\r\n      const interval = setInterval(fetchMessages, 5000);\r\n      return () => clearInterval(interval);\r\n    }\r\n  }, [user]);\r\n\r\n  const login = (username) => setUser(username);\r\n  const logout = () => {\r\n    setUser(null);\r\n    setMessages([]); // Opcional: Limpa as mensagens ao sair\r\n  }\r\n\r\n  // --- CORREÇÃO: Função resetPreview adicionada ---\r\n  const resetPreview = () => setPreview(null); \r\n  // ------------------------------------------------\r\n\r\n  const value = {\r\n    user,\r\n    messages,\r\n    preview,\r\n    setPreview,\r\n    login,\r\n    logout,\r\n    resetPreview, // Incluído no contexto\r\n  };\r\n\r\n  return <AppContext.Provider value={value}>{children}</AppContext.Provider>;\r\n};"],"mappings":";;AAAA;;AAEA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AACjE,OAAO,KAAKC,GAAG,MAAM,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvC,OAAO,MAAMC,UAAU,gBAAGN,aAAa,CAAC,CAAC;AAEzC,OAAO,MAAMO,WAAW,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC3C,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACW,QAAQ,EAAEC,WAAW,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACa,OAAO,EAAEC,UAAU,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;;EAE5C;EACAC,SAAS,CAAC,MAAM;IACd,IAAIQ,IAAI,EAAE;MACR;MACA,MAAMM,aAAa,GAAG,MAAAA,CAAA,KAAY;QAChC,IAAI;UACF,MAAMC,IAAI,GAAG,MAAMd,GAAG,CAACe,WAAW,CAAC,CAAC;UACpCL,WAAW,CAACI,IAAI,CAAC;QACnB,CAAC,CAAC,OAAOE,KAAK,EAAE;UACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;UACnD;QACF;MACF,CAAC;MACDH,aAAa,CAAC,CAAC;MACf,MAAMK,QAAQ,GAAGC,WAAW,CAACN,aAAa,EAAE,IAAI,CAAC;MACjD,OAAO,MAAMO,aAAa,CAACF,QAAQ,CAAC;IACtC;EACF,CAAC,EAAE,CAACX,IAAI,CAAC,CAAC;EAEV,MAAMc,KAAK,GAAIC,QAAQ,IAAKd,OAAO,CAACc,QAAQ,CAAC;EAC7C,MAAMC,MAAM,GAAGA,CAAA,KAAM;IACnBf,OAAO,CAAC,IAAI,CAAC;IACbE,WAAW,CAAC,EAAE,CAAC,CAAC,CAAC;EACnB,CAAC;;EAED;EACA,MAAMc,YAAY,GAAGA,CAAA,KAAMZ,UAAU,CAAC,IAAI,CAAC;EAC3C;;EAEA,MAAMa,KAAK,GAAG;IACZlB,IAAI;IACJE,QAAQ;IACRE,OAAO;IACPC,UAAU;IACVS,KAAK;IACLE,MAAM;IACNC,YAAY,CAAE;EAChB,CAAC;EAED,oBAAOtB,OAAA,CAACC,UAAU,CAACuB,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAApB,QAAA,EAAEA;EAAQ;IAAAsB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAsB,CAAC;AAC5E,CAAC;AAACxB,EAAA,CA7CWF,WAAW;AAAA2B,EAAA,GAAX3B,WAAW;AAAA,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}