{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mathe\\\\planet-tech-chat\\\\frontend\\\\src\\\\context\\\\AppContext.js\",\n  _s = $RefreshSig$();\n// /frontend/src/context/AppContext.js - CÓDIGO FINAL E COMPLETO\nimport React, { createContext, useState, useEffect } from 'react';\nimport * as api from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AppContext = /*#__PURE__*/createContext();\nexport const AppProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [messages, setMessages] = useState([]);\n  const [preview, setPreview] = useState(null);\n\n  // Poll mensagens a cada 5s\n  useEffect(() => {\n    if (user) {\n      const fetchMessages = async () => {\n        try {\n          const data = await api.getMessages();\n          setMessages(data);\n        } catch (error) {\n          console.error(\"Erro ao carregar mensagens:\", error);\n        }\n      };\n      fetchMessages();\n      const interval = setInterval(fetchMessages, 5000);\n      return () => clearInterval(interval);\n    }\n  }, [user]);\n  const login = username => setUser(username);\n  const logout = () => setUser(null);\n  const resetPreview = () => setPreview(null);\n\n  // Função para adicionar mensagem localmente (Optimistic Update)\n  const addMessageLocally = newMessage => {\n    setMessages(prevMessages => [...prevMessages, newMessage]);\n  };\n\n  // --- NOVO: Lógica para limpar o chat ---\n  const clearMessages = () => setMessages([]);\n  const handleResetChat = async () => {\n    // Confirmação para evitar exclusão acidental\n    if (window.confirm('Tem certeza que deseja LIMPAR PERMANENTEMENTE o chat? Isso não pode ser desfeito.')) {\n      try {\n        await api.resetChat(); // Chama o endpoint do backend\n        clearMessages(); // Limpa imediatamente o estado local (frontend)\n        alert('Chat limpo com sucesso!');\n      } catch (error) {\n        console.error('Falha ao resetar o chat:', error);\n        alert('Erro ao limpar o chat. Verifique o console e o servidor.');\n      }\n    }\n  };\n  // ----------------------------------------\n\n  const value = {\n    user,\n    messages,\n    preview,\n    setPreview,\n    login,\n    logout,\n    resetPreview,\n    addMessageLocally,\n    handleResetChat // Exportado para o Chat.js\n  };\n  return /*#__PURE__*/_jsxDEV(AppContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 10\n  }, this);\n};\n_s(AppProvider, \"Q9TdBvdVwrOTTEjkB4Bag3iwNkk=\");\n_c = AppProvider;\nvar _c;\n$RefreshReg$(_c, \"AppProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","api","jsxDEV","_jsxDEV","AppContext","AppProvider","children","_s","user","setUser","messages","setMessages","preview","setPreview","fetchMessages","data","getMessages","error","console","interval","setInterval","clearInterval","login","username","logout","resetPreview","addMessageLocally","newMessage","prevMessages","clearMessages","handleResetChat","window","confirm","resetChat","alert","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/mathe/planet-tech-chat/frontend/src/context/AppContext.js"],"sourcesContent":["// /frontend/src/context/AppContext.js - CÓDIGO FINAL E COMPLETO\r\nimport React, { createContext, useState, useEffect } from 'react';\r\nimport * as api from '../services/api';\r\n\r\nexport const AppContext = createContext();\r\n\r\nexport const AppProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [messages, setMessages] = useState([]);\r\n  const [preview, setPreview] = useState(null);\r\n\r\n  // Poll mensagens a cada 5s\r\n  useEffect(() => {\r\n    if (user) {\r\n      const fetchMessages = async () => {\r\n        try {\r\n          const data = await api.getMessages();\r\n          setMessages(data);\r\n        } catch (error) {\r\n          console.error(\"Erro ao carregar mensagens:\", error);\r\n        }\r\n      };\r\n      fetchMessages();\r\n      const interval = setInterval(fetchMessages, 5000);\r\n      return () => clearInterval(interval);\r\n    }\r\n  }, [user]);\r\n\r\n  const login = (username) => setUser(username);\r\n  const logout = () => setUser(null);\r\n\r\n  const resetPreview = () => setPreview(null); \r\n\r\n  // Função para adicionar mensagem localmente (Optimistic Update)\r\n  const addMessageLocally = (newMessage) => {\r\n      setMessages(prevMessages => [...prevMessages, newMessage]);\r\n  };\r\n\r\n  // --- NOVO: Lógica para limpar o chat ---\r\n  const clearMessages = () => setMessages([]); \r\n\r\n  const handleResetChat = async () => {\r\n      // Confirmação para evitar exclusão acidental\r\n      if (window.confirm('Tem certeza que deseja LIMPAR PERMANENTEMENTE o chat? Isso não pode ser desfeito.')) {\r\n          try {\r\n              await api.resetChat(); // Chama o endpoint do backend\r\n              clearMessages(); // Limpa imediatamente o estado local (frontend)\r\n              alert('Chat limpo com sucesso!');\r\n          } catch (error) {\r\n              console.error('Falha ao resetar o chat:', error);\r\n              alert('Erro ao limpar o chat. Verifique o console e o servidor.');\r\n          }\r\n      }\r\n  };\r\n  // ----------------------------------------\r\n\r\n  const value = {\r\n    user,\r\n    messages,\r\n    preview,\r\n    setPreview,\r\n    login,\r\n    logout,\r\n    resetPreview, \r\n    addMessageLocally, \r\n    handleResetChat // Exportado para o Chat.js\r\n  };\r\n\r\n  return <AppContext.Provider value={value}>{children}</AppContext.Provider>;\r\n};"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AACjE,OAAO,KAAKC,GAAG,MAAM,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvC,OAAO,MAAMC,UAAU,gBAAGN,aAAa,CAAC,CAAC;AAEzC,OAAO,MAAMO,WAAW,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC3C,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACW,QAAQ,EAAEC,WAAW,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACa,OAAO,EAAEC,UAAU,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;;EAE5C;EACAC,SAAS,CAAC,MAAM;IACd,IAAIQ,IAAI,EAAE;MACR,MAAMM,aAAa,GAAG,MAAAA,CAAA,KAAY;QAChC,IAAI;UACF,MAAMC,IAAI,GAAG,MAAMd,GAAG,CAACe,WAAW,CAAC,CAAC;UACpCL,WAAW,CAACI,IAAI,CAAC;QACnB,CAAC,CAAC,OAAOE,KAAK,EAAE;UACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;QACrD;MACF,CAAC;MACDH,aAAa,CAAC,CAAC;MACf,MAAMK,QAAQ,GAAGC,WAAW,CAACN,aAAa,EAAE,IAAI,CAAC;MACjD,OAAO,MAAMO,aAAa,CAACF,QAAQ,CAAC;IACtC;EACF,CAAC,EAAE,CAACX,IAAI,CAAC,CAAC;EAEV,MAAMc,KAAK,GAAIC,QAAQ,IAAKd,OAAO,CAACc,QAAQ,CAAC;EAC7C,MAAMC,MAAM,GAAGA,CAAA,KAAMf,OAAO,CAAC,IAAI,CAAC;EAElC,MAAMgB,YAAY,GAAGA,CAAA,KAAMZ,UAAU,CAAC,IAAI,CAAC;;EAE3C;EACA,MAAMa,iBAAiB,GAAIC,UAAU,IAAK;IACtChB,WAAW,CAACiB,YAAY,IAAI,CAAC,GAAGA,YAAY,EAAED,UAAU,CAAC,CAAC;EAC9D,CAAC;;EAED;EACA,MAAME,aAAa,GAAGA,CAAA,KAAMlB,WAAW,CAAC,EAAE,CAAC;EAE3C,MAAMmB,eAAe,GAAG,MAAAA,CAAA,KAAY;IAChC;IACA,IAAIC,MAAM,CAACC,OAAO,CAAC,mFAAmF,CAAC,EAAE;MACrG,IAAI;QACA,MAAM/B,GAAG,CAACgC,SAAS,CAAC,CAAC,CAAC,CAAC;QACvBJ,aAAa,CAAC,CAAC,CAAC,CAAC;QACjBK,KAAK,CAAC,yBAAyB,CAAC;MACpC,CAAC,CAAC,OAAOjB,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;QAChDiB,KAAK,CAAC,0DAA0D,CAAC;MACrE;IACJ;EACJ,CAAC;EACD;;EAEA,MAAMC,KAAK,GAAG;IACZ3B,IAAI;IACJE,QAAQ;IACRE,OAAO;IACPC,UAAU;IACVS,KAAK;IACLE,MAAM;IACNC,YAAY;IACZC,iBAAiB;IACjBI,eAAe,CAAC;EAClB,CAAC;EAED,oBAAO3B,OAAA,CAACC,UAAU,CAACgC,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAA7B,QAAA,EAAEA;EAAQ;IAAA+B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAsB,CAAC;AAC5E,CAAC;AAACjC,EAAA,CA/DWF,WAAW;AAAAoC,EAAA,GAAXpC,WAAW;AAAA,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}